{"$message_type":"diagnostic","message":"cannot find value `input` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":561,"byte_end":566,"line_start":27,"line_end":27,"column_start":39,"column_end":44,"is_primary":true,"text":[{"text":"    let evaluation = evaluate(&file, &input);","highlight_start":39,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `input` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:27:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let evaluation = evaluate(&file, &input);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`match` arms have incompatible types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4822,"byte_end":4842,"line_start":163,"line_end":163,"column_start":44,"column_end":64,"is_primary":false,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":44,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4721,"byte_end":4776,"line_start":162,"line_end":162,"column_start":44,"column_end":99,"is_primary":false,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":44,"highlight_end":99}],"label":"this is found to be of type `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4636,"byte_end":4870,"line_start":161,"line_end":164,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":25,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":"`match` arms have incompatible types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":16829,"byte_end":16829,"line_start":484,"line_end":484,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"                                );","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `match` arms have incompatible types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis is found to be of type `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`match` arms have incompatible types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                )\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`match` arms have incompatible types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4822,"byte_end":4842,"line_start":163,"line_end":163,"column_start":44,"column_end":64,"is_primary":false,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":44,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4721,"byte_end":4776,"line_start":162,"line_end":162,"column_start":44,"column_end":99,"is_primary":false,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":44,"highlight_end":99}],"label":"this is found to be of type `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4636,"byte_end":4870,"line_start":161,"line_end":164,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":25,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":"`match` arms have incompatible types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":16829,"byte_end":16829,"line_start":484,"line_end":484,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"                                );","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `match` arms have incompatible types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis is found to be of type `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`match` arms have incompatible types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                )\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`match` arms have incompatible types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4822,"byte_end":4842,"line_start":163,"line_end":163,"column_start":44,"column_end":64,"is_primary":false,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":44,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4721,"byte_end":4776,"line_start":162,"line_end":162,"column_start":44,"column_end":99,"is_primary":false,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":44,"highlight_end":99}],"label":"this is found to be of type `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4636,"byte_end":4870,"line_start":161,"line_end":164,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":25,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":"`match` arms have incompatible types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":16829,"byte_end":16829,"line_start":484,"line_end":484,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"                                );","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `match` arms have incompatible types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis is found to be of type `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`match` arms have incompatible types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                )\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`match` arms have incompatible types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4822,"byte_end":4842,"line_start":163,"line_end":163,"column_start":44,"column_end":64,"is_primary":false,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":44,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4721,"byte_end":4776,"line_start":162,"line_end":162,"column_start":44,"column_end":99,"is_primary":false,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":44,"highlight_end":99}],"label":"this is found to be of type `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4636,"byte_end":4870,"line_start":161,"line_end":164,"column_start":25,"column_end":26,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":25,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":"`match` arms have incompatible types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":16829,"byte_end":16829,"line_start":484,"line_end":484,"column_start":34,"column_end":34,"is_primary":true,"text":[{"text":"                                );","highlight_start":34,"highlight_end":34}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `match` arms have incompatible types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis is found to be of type `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`match` arms have incompatible types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                )\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":15022,"byte_end":16829,"line_start":454,"line_end":484,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),","highlight_start":1,"highlight_end":111},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {","highlight_start":1,"highlight_end":104},{"text":"                                        if let Ok(b) = cstring_from_utf8!(b).parse::<f64>() {","highlight_start":1,"highlight_end":94},{"text":"                                            return Ok(a + b)","highlight_start":1,"highlight_end":61},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            return Err(\"Could not coerce Gestalt to Linear\")","highlight_start":1,"highlight_end":93},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":109},{"text":"                                        Ok((cstring_from_utf8!(a) + &format!(\"{}\", b)).into())","highlight_start":1,"highlight_end":95},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Gestalt|a: Vec<u8>, b: Vec<u8>| -> Result<Vec<u8>, &str> {","highlight_start":1,"highlight_end":114},{"text":"                                        Ok((cstring_from_utf8!(a) + &cstring_from_utf8!(b)).into())","highlight_start":1,"highlight_end":100},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Linear(b));","highlight_start":1,"highlight_end":69},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Gestalt, Set|a: Vec<Var>, b: Vec<u8>| -> Vec<Var> {","highlight_start":1,"highlight_end":94},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.push(Var::Gestalt(b));","highlight_start":1,"highlight_end":70},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                );","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> Result<f64, &str> {Ok(a + b)}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Gestalt, Linear|a: f64, b: Vec<u8>| -> Result<f64, &str> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m484\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<u8>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<u8>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<u8>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<u8>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<u8>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<u8>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<u8>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<u8>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<u8>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<u8>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":16977,"byte_end":17775,"line_start":488,"line_end":502,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),","highlight_start":1,"highlight_end":92},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.remove(b as i64 as usize);","highlight_start":1,"highlight_end":74},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m488\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b:f64| -> f64 {a - b}),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":17925,"byte_end":18068,"line_start":506,"line_end":508,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m507\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a * b})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18212,"byte_end":18355,"line_start":512,"line_end":514,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})","highlight_start":1,"highlight_end":92},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a / b})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18505,"byte_end":18652,"line_start":518,"line_end":520,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})","highlight_start":1,"highlight_end":96},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m519\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {a.powf(b)})\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m520\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m533\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m533\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":18834,"byte_end":19094,"line_start":527,"line_end":533,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > 0.0 && b > 0.0 {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m533\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19232,"byte_end":19488,"line_start":537,"line_end":541,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}","highlight_start":1,"highlight_end":79},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m537\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m538\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m539\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > 0.0 || b > 0.0 {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a == b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a == b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":19678,"byte_end":20129,"line_start":548,"line_end":556,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Gestalt, Linear|a: Vec<u8>, b: Vec<u8>| -> f64 {","highlight_start":1,"highlight_end":95},{"text":"                                        if a == b {1.0} else {0.0}","highlight_start":1,"highlight_end":67},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m548\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m549\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m550\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a == b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m551\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m555\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<u8>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<u8>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<u8>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<u8>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<u8>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<u8>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<u8>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<u8>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<u8>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<u8>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":20277,"byte_end":21200,"line_start":560,"line_end":576,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a > b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        let mut newges = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newges.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newges","highlight_start":1,"highlight_end":47},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        let mut newset = a.clone();","highlight_start":1,"highlight_end":68},{"text":"                                        newset.truncate(a.len() - b as i64 as usize);","highlight_start":1,"highlight_end":86},{"text":"                                        newset","highlight_start":1,"highlight_end":47},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a > b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a < b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `f64`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected type `f64`\n   found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `f64`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a < b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mf64\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<u8>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<u8>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<u8>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<u8>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<u8>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a < b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<u8>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<u8>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<u8>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<u8>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<u8>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a < b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4706,"byte_end":4716,"line_start":162,"line_end":162,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:162:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a < b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":4807,"byte_end":4817,"line_start":163,"line_end":163,"column_start":29,"column_end":39,"is_primary":true,"text":[{"text":"                            Err(error) => {return_error!(error)}","highlight_start":29,"highlight_end":39}],"label":"expected `Vec<Var>`, found `Result<_, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":4642,"byte_end":4674,"line_start":161,"line_end":161,"column_start":31,"column_end":63,"is_primary":false,"text":[{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":31,"highlight_end":63}],"label":"this expression has type `Vec<Var>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected struct `Vec<Var>`\n     found enum `Result<_, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:163:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                        match $operation(a.clone(), b.clone()) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis expression has type `Vec<Var>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                            Err(error) => {return_error!(error)}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<Var>`, found `Result<_, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a < b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<Var>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                 found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, _>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5151,"line_start":175,"line_end":175,"column_start":13,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":64}],"label":"expected `()`, found `Result<_, (String, ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":3989,"byte_end":5001,"line_start":144,"line_end":169,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            match (stack.get(1).unwrap(), stack.front().unwrap()) {","highlight_start":13,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {","highlight_start":1,"highlight_end":83},{"text":"                    clear_and_progress!();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    stack.push_front(Abstract::Var(Var::Void));","highlight_start":1,"highlight_end":64},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    (Abstract::Var(Var::$vartypea(a)), Abstract::Var(Var::$vartypeb(b))) => {","highlight_start":1,"highlight_end":94},{"text":"                        let result = $operation(","highlight_start":1,"highlight_end":49},{"text":"                            a.clone(),","highlight_start":1,"highlight_end":39},{"text":"                            b.clone()","highlight_start":1,"highlight_end":38},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        clear_and_progress!();","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        match $operation(a.clone(), b.clone()) {","highlight_start":1,"highlight_end":65},{"text":"                            Ok(result) => {stack.push_front(Abstract::Var(Var::$outtype(result)));}","highlight_start":1,"highlight_end":100},{"text":"                            Err(error) => {return_error!(error)}","highlight_start":1,"highlight_end":65},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected unit type `()`\n        found enum `Result<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5151,"byte_end":5151,"line_start":175,"line_end":175,"column_start":64,"column_end":64,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":64,"highlight_end":64}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5001,"byte_end":5001,"line_start":169,"line_end":169,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"            }","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5100,"byte_end":5100,"line_start":175,"line_end":175,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"            Result::Err(($errtext.to_string(), on, stack, map))","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/main.rs","byte_start":4939,"byte_end":4985,"line_start":168,"line_end":168,"column_start":23,"column_end":69,"is_primary":false,"text":[{"text":"                _ => {return_error!(\"Incorrect types for operation\")}","highlight_start":23,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":21345,"byte_end":22006,"line_start":580,"line_end":592,"column_start":33,"column_end":34,"is_primary":false,"text":[{"text":"                                multi_operate!(","highlight_start":33,"highlight_end":48},{"text":"                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {","highlight_start":1,"highlight_end":85},{"text":"                                        if a < b {1.0} else {0.0}","highlight_start":1,"highlight_end":66},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Gestalt, Linear, Gestalt|a: Vec<u8>, b: f64| -> Vec<u8> {","highlight_start":1,"highlight_end":95},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    }),","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                    (Set, Linear, Set|a: Vec<Var>, b: f64| -> Vec<Var> {","highlight_start":1,"highlight_end":89},{"text":"                                        a[b as i64 as usize..].to_vec()","highlight_start":1,"highlight_end":72},{"text":"                                    })","highlight_start":1,"highlight_end":39},{"text":"                                )","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"multi_operate!","def_site_span":{"file_name":"src/main.rs","byte_start":3864,"byte_end":3890,"line_start":142,"line_end":142,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    macro_rules! multi_operate {","highlight_start":5,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"return_error!","def_site_span":{"file_name":"src/main.rs","byte_start":5029,"byte_end":5054,"line_start":173,"line_end":173,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    macro_rules! return_error {","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:175:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            match (stack.get(1).unwrap(), stack.front().unwrap()) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (Abstract::Var(Var::Void), _) | (_, Abstract::Var(Var::Void)) => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    clear_and_progress!();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                _ => {return_error!(\"Incorrect types for operation\")}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mexpected this to be `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found `Result<_, (String, ..., ..., ...)>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                multi_operate!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    (Linear, Linear, Linear|a: f64, b: f64| -> f64 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                        if a < b {1.0} else {0.0}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m\u001b[35m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                    found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<_, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `return_error` which comes from the expansion of the macro `multi_operate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            Result::Err(($errtext.to_string(), on, stack, map))\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            }\u001b[0m\u001b[0m\u001b[38;5;10m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mreturn \u001b[0m\u001b[0mResult::Err(($errtext.to_string(), on, stack, map))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[38;5;10m++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":22529,"byte_end":22532,"line_start":604,"line_end":604,"column_start":68,"column_end":71,"is_primary":true,"text":[{"text":"                                    stack.push_front(Abstract::Var(eva));","highlight_start":68,"highlight_end":71}],"label":"expected `Var`, found `Result<Var, (..., ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":22515,"byte_end":22528,"line_start":604,"line_end":604,"column_start":54,"column_end":67,"is_primary":false,"text":[{"text":"                                    stack.push_front(Abstract::Var(eva));","highlight_start":54,"highlight_end":67}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Var`\n   found enum `Result<Var, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":1534,"byte_end":1537,"line_start":67,"line_end":67,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Var(Var),     //Values","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<Var, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":22532,"byte_end":22532,"line_start":604,"line_end":604,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"                                    stack.push_front(Abstract::Var(eva));","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:604:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m                   stack.push_front(Abstract::Var(eva));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Var`, found `Result<Var, (..., ..., ..., ...)>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected enum `Var`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<\u001b[0m\u001b[0mVar, \u001b[0m\u001b[0m\u001b[1m\u001b[35m(String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:67:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Var(Var),     //Values\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<Var, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                    stack.push_front(Abstract::Var(eva\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":22857,"byte_end":22860,"line_start":612,"line_end":612,"column_start":68,"column_end":71,"is_primary":true,"text":[{"text":"                                    stack.push_front(Abstract::Var(eva));","highlight_start":68,"highlight_end":71}],"label":"expected `Var`, found `Result<Var, (..., ..., ..., ...)>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":22843,"byte_end":22856,"line_start":612,"line_end":612,"column_start":54,"column_end":67,"is_primary":false,"text":[{"text":"                                    stack.push_front(Abstract::Var(eva));","highlight_start":54,"highlight_end":67}],"label":"arguments to this enum variant are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `Var`\n   found enum `Result<Var, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":1534,"byte_end":1537,"line_start":67,"line_end":67,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Var(Var),     //Values","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use the `?` operator to extract the `Result<Var, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":22860,"byte_end":22860,"line_start":612,"line_end":612,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"                                    stack.push_front(Abstract::Var(eva));","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"?","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:612:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m                   stack.push_front(Abstract::Var(eva));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Var`, found `Result<Var, (..., ..., ..., ...)>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14marguments to this enum variant are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected enum `Var`\u001b[0m\n\u001b[0m               found enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<\u001b[0m\u001b[0mVar, \u001b[0m\u001b[0m\u001b[1m\u001b[35m(String, usize, VecDeque<Abstract>, HashMap<String, Var>)>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:67:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Var(Var),     //Values\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the `?` operator to extract the `Result<Var, (String, usize, VecDeque<Abstract>, HashMap<String, Var>)>` value, propagating a `Result::Err` value to the caller\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                    stack.push_front(Abstract::Var(eva\u001b[0m\u001b[0m\u001b[38;5;10m?\u001b[0m\u001b[0m));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 48 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 48 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0425.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0308, E0425.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
